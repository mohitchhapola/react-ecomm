import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { createUser,checkUser, updateUser, Signout } from './authAPI';

const initialState = {
  loggedInUser: null,
  status: 'idle',
  error: null,
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const createUserAsync = createAsyncThunk(
  'user/createUser',
  async (userData) => {
    const response = await createUser(userData);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const updateUserAsync = createAsyncThunk(
  'user/updateUser',
  async (update) => {
    const response = await updateUser({update});
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const checkUserAsync = createAsyncThunk(
  'user/checkUser',
  async (loginInfo) => {
    const response = await checkUser(loginInfo);
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);
export const logoutUserAsync = createAsyncThunk(
  'user/logoutUser',
  async () => {
    const response = await Signout();
    localStorage.removeItem('user');
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);


// export const autoLoginAsync = createAsyncThunk(
//   'user/autoLogin',
//   async () => {
//     try {
//       // Check if authentication data exists in local storage
//       const authData = localStorage.getItem('authData');
//       if (authData) {
//         // Parse the authentication data
//         const parsedAuthData = JSON.parse(authData);

//         // Attempt to log in the user using the stored authentication data
//         const response = await checkUser(parsedAuthData);

//         // If auto-login successful, return user data
//         return response.data;
//       } else {
//         // If no authentication data found, return null
//         return null;
//       }
//     } catch (error) {
//       // If auto-login fails, throw the error
//       throw error;
//     }
//   }
// );


export const counterSlice = createSlice({
  name: 'user',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
   
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createUserAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(createUserAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.loggedInUser = action.payload;
      })
      .addCase(logoutUserAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(logoutUserAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.loggedInUser = null;
      })
      .addCase(checkUserAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(checkUserAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.loggedInUser = action.payload;
      })
      .addCase(checkUserAsync.rejected, (state, action) => {
        state.status = 'idle';
        state.error = action.error;
      })
      // .addCase(autoLoginAsync.pending, (state) => {
      //   state.status = 'loading';
      // })
      // .addCase(autoLoginAsync.fulfilled, (state, action) => {
      //   state.status = 'idle';
      //   state.loggedInUser = action.payload;
      // })
      .addCase(updateUserAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(updateUserAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.loggedInUser = action.payload;
      });
  },
});

export const selectError = (state)=>state.auth.error
export const selectloggedInUser = (state)=>state.auth.loggedInUser;
export const { increment } = counterSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectCount = (state) => state.counter.value;


export default counterSlice.reducer;
